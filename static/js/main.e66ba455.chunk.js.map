{"version":3,"sources":["components/Content/Header.jsx","utils/index.js","components/Content/ListOfCities.jsx","components/Content/Content.jsx","utils/makeRequest.js","components/FrontEndTest.jsx","index.js"],"names":["Header","className","type","transformStrings","item_one","item_two","item_three","isAirportOrCity","bookingId","split","ListOfCities","listOfCities","keyFields","getSelectedCity","map","item","name","index","city","region","country","onClick","Content","onCityChange","selectedCity","id","placeholder","onChange","value","Object","entries","length","keys","makeRequest","searchTerm","a","fetch","BASE_URL","response","json","content","FrontEndTest","React","useState","updateList","setSelectedCity","event","inputCity","target","then","results","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e66ba455.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => (\r\n    <header className=\"appHeader\">\r\n        <div className=\"d-flex justify-content-between\">\r\n            <h3 className=\"title text-white pl-3 pt-3\">Find Your Car</h3>\r\n            <div className=\"pt-3 pr-3\"><button type=\"button\" className=\"btn btn-light\">Manage Bookings</button></div>\r\n        </div>\r\n        <div className=\"text-center pb-4\">\r\n            <h3 className=\"title text-white pl-3 pt-3\">Car Hire - Search, Compare & Save</h3>\r\n        </div>\r\n    </header>\r\n);\r\n\r\nexport default Header;","export const transformStrings = (item_one, item_two, item_three) => `${item_one ? item_one +',' : ''} ${item_two ? item_two +',' : ''} ${item_three ? item_three : ''}`;\r\n\r\nexport const isAirportOrCity = bookingId => bookingId && bookingId.split(\"-\")[0];","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { transformStrings, isAirportOrCity } from '../../utils/index';\r\n\r\nconst DOCS_KEY_FIELD = 'docs';\r\nconst CITY_BOOKING = 'city';\r\nconst AIRPORT_BOOKING = 'airport';\r\n\r\nconst ListOfCities = ({ listOfCities, keyFields, getSelectedCity }) => {\r\n    if(keyFields === DOCS_KEY_FIELD) {\r\n        return listOfCities[keyFields].map(item => {\r\n            const { name, index, bookingId, city, region, country } = item;\r\n            return (\r\n                <li className=\"listingItem ml-0\" key={index} onClick={() =>getSelectedCity(item)}>\r\n                    <div className=\"d-flex pb-3\">\r\n                        {\r\n                            isAirportOrCity(bookingId) === CITY_BOOKING && (\r\n                                <span className=\"badge bg-primary mr-3 mt-2 iconDisplay\">City</span>\r\n                            )\r\n                        }\r\n                        {\r\n                            isAirportOrCity(bookingId) === AIRPORT_BOOKING && (\r\n                                <span className=\"badge bg-warning mr-3 mt-2 iconDisplay\">Airport</span>\r\n                            )\r\n                        }\r\n                        <div className=\"details\">\r\n                            <p className=\"m-0\">{name}</p>\r\n                            <p className=\"m-0\">{transformStrings(city, region, country)}</p>\r\n                        </div>\r\n                    </div>\r\n                </li> \r\n            )\r\n        });\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nListOfCities.propTypes = {\r\n    keyFields: PropTypes.string.isRequired,\r\n    getSelectedCity: PropTypes.func.isRequired,\r\n    listOfCities: PropTypes.shape({\r\n        docs: PropTypes.arrayOf(PropTypes.shape({\r\n            name: PropTypes.string, \r\n            index: PropTypes.number, \r\n            bookingId: PropTypes.string,\r\n            city: PropTypes.string,\r\n            region: PropTypes.string,\r\n            country: PropTypes.string, \r\n        })),\r\n    }).isRequired,\r\n}\r\n\r\nexport default ListOfCities;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ListOfCities from './ListOfCities';\r\n\r\nconst Content = ({ \r\n    onCityChange, \r\n    selectedCity, \r\n    listOfCities, \r\n    getSelectedCity \r\n}) => (\r\n    <div className=\"section\">\r\n        <div className=\"search-bar\">\r\n            <div className=\"search-bar__background p-1\">\r\n                <div className=\"searchbox\">\r\n                    <input type=\"search\" id=\"pickup-location\" className=\"form-control textBox\" placeholder=\"Pickup Location\"\r\n                        aria-label=\"Search\" onChange={onCityChange} value={selectedCity} />\r\n                    {\r\n                        Object.entries(listOfCities).length > 0 && (\r\n                            <div className=\"card searchbox__suggestions\">\r\n                                <ul className=\"searchbox__listing pt-2\">\r\n                                    {\r\n                                        Object.keys(listOfCities).map((item, index) => {\r\n                                            return (\r\n                                                <ListOfCities \r\n                                                    key={index} \r\n                                                    listOfCities={listOfCities} \r\n                                                    keyFields={item} \r\n                                                    getSelectedCity={getSelectedCity}\r\n                                                />\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </ul>\r\n                            </div>   \r\n                        )\r\n                    } \r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"backSection\" />\r\n    </div>\r\n);\r\n\r\nContent.propTypes = {\r\n    onCityChange: PropTypes.func.isRequired,\r\n    selectedCity: PropTypes.string.isRequired,\r\n    getSelectedCity: PropTypes.func.isRequired,\r\n    listOfCities: PropTypes.shape({}).isRequired,\r\n}\r\n\r\nexport default Content;","const MAX_RESULTS = 6;\r\n\r\nconst BASE_URL = 'https://www.rentalcars.com/FTSAutocomplete.do?solrIndex=fts_en';\r\n\r\nconst makeRequest = async (searchTerm) => {\r\n    try {\r\n        const response = await fetch(BASE_URL+'&solrRows='+MAX_RESULTS+'&solrTerm='+searchTerm);\r\n        const content = await response.json();\r\n        return content;\r\n    } catch(e) {\r\n        // this block can be used to handle errors gracefully - can return any flag or use any redux store to update\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default makeRequest;","import React from 'react';\r\nimport Header from './Content/Header';\r\nimport Content from './Content/Content';\r\nimport makeRequest from '../utils/makeRequest';\r\nimport { transformStrings } from '../utils/index';\r\n\r\nconst FrontEndTest = () => {\r\n    const [listOfCities, updateList] = React.useState({});\r\n    const [selectedCity, setSelectedCity] = React.useState('');\r\n    \r\n    // function to input search box - change event\r\n    const onCityChange = event => {\r\n        const inputCity = event.target.value;\r\n        setSelectedCity(inputCity);\r\n        updateList({});\r\n        if(inputCity.length > 1){\r\n            // make API call to get city list\r\n            makeRequest(event.target.value).then(({ results }) => {\r\n                updateList(results);\r\n            });\r\n        }\r\n    }\r\n\r\n    // function to select city from dropdown\r\n    const getSelectedCity = ({ bookingId, name, city, country }) => {\r\n        if(bookingId) {\r\n            setSelectedCity(transformStrings(name, city, country));\r\n            updateList({});\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <Header />\r\n            <Content \r\n                onCityChange={onCityChange}\r\n                getSelectedCity={getSelectedCity}\r\n                listOfCities={listOfCities}\r\n                selectedCity={selectedCity}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FrontEndTest;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport FrontEndTest from './components/FrontEndTest';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './components/FrontEndTest.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <FrontEndTest />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}